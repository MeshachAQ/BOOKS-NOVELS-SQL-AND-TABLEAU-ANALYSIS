select * from books$

---Starting off this project, I wanna know more about the dataset and so will look at each row 1 by 1

select distinct bookID FROM books$

select distinct title FROM books$ where title is not null

select distinct authors FROM books$

select distinct publisher FROM books$

SELECT DISTINCT AVERAGE_RATING FROM books$ ORDER BY AVERAGE_RATING DESC

SELECT DISTINCT [  num_pages] FROM books$ ORDER BY [  num_pages] DESC

---Okay we can now try some few analysis using this data to gain insights
select count(bookID) AS Count_Books from books$

---Before we continue, let's try to kindly remove duplicates to avoid citical errors in our analysis

WITH BOOK AS (select *,
ROW_NUMBER() OVER(PARTITION BY title, authors, publisher, Pub_date ORDER BY bookID) AS ROW_NUM FROM books$)
SELECT * FROM BOOK WHERE ROW_NUM > 1

---SEEING THERE ARE NO DUPLICATE VALUES, WE CAN PROCEED WITH OUR ANALYSIS

QUESTIONS:
--1. WHICH BOOK TITLES HAVE THE HIGHEST AND LOWEST AVERAGE RATINGS?
--2. WHAT IS THE SECOND HIGHEST AVERAGE RATING?
--3. WHAT IS THE HIGHEST AVERAGE RATING
--4. CAN WE GROUP THE BOOK TITLES ACCORDING TO AUTHORS AND FIND HOW MANY BOOKS EACH AUTHOR HAS WRITTEN?
--5. LET'S FIND THE BOOKS WITH THE HIGHEST NUMBER OF PAGES AND THOSE WITH THE LEAST NUMBER OF PAGES
--6. FIND THE TOP 5 BOOKS WITH THE HIGHEST RATINGS_COUNT AND BOTTOM 5 BOOKS WITH THE LOWEST RATINGS_COUNT
--7. CAN WE CREATE A REPORT FOR PUBLISHERS TAKING INTO CONSIDERATION NUMBER OF BOOKS PUBLISHED, AUTHORS, AVERAGE RATINGS, RATINGS COUNT AND LANGUAGE CODE?

---AFTER WHICH WE SHALL DECIDE TO DROP SOME COLUMNS AND CREATE A VIEW. LET'S GET RIGHT INTO IT

ANSWERS:
--1A
SELECT TOP 10 TITLE, sum(AVERAGE_RATING) AS TOTAL_AVG_RATINGS FROM books$ GROUP BY TITLE ORDER BY sum(AVERAGE_RATING) DESC

--B
SELECT TOP 10 TITLE, sum(AVERAGE_RATING) AS TOTAL_AVG_RATINGS FROM books$ GROUP BY TITLE ORDER BY sum(AVERAGE_RATING) ASC

--2
SELECT MAX(AVERAGE_RATING) AS SECOND_HIGHEST_RATING FROM books$ WHERE AVERAGE_RATING < (SELECT MAX(AVERAGE_RATING) FROM books$) AND AVERAGE_RATING IS NOT NULL

--3A
SELECT MAX(AVERAGE_RATING) AS HIGHEST_RATING FROM books$

--3B
SELECT TOP 10 TITLE, AVERAGE_RATING FROM books$
ORDER BY AVERAGE_RATING DESC

--4
SELECT AUTHORS, COUNT(TITLE) AS BOOKS_WRITTEN FROM books$
WHERE TITLE IS NOT NULL
GROUP BY AUTHORS
ORDER BY BOOKS_WRITTEN DESC


select * from books$

--5A
SELECT TOP 10 TITLE, MAX([  num_pages]) AS BOOK_HIGHEST_PAGES FROM books$ WHERE TITLE IS NOT NULL
GROUP BY TITLE
ORDER BY BOOK_HIGHEST_PAGES DESC

--5B
SELECT TOP 10 TITLE, MAX([  num_pages]) AS BOOK_HIGHEST_PAGES FROM books$ WHERE TITLE IS NOT NULL
GROUP BY TITLE
ORDER BY BOOK_HIGHEST_PAGES ASC

--6A
SELECT TOP 10 TITLE, MAX(RATINGS_COUNT) AS RATINGS FROM books$ WHERE TITLE IS NOT NULL
GROUP BY TITLE
ORDER BY RATINGS DESC

--6B
SELECT TOP 10 TITLE, MAX(RATINGS_COUNT) AS RATINGS FROM books$ WHERE TITLE IS NOT NULL
GROUP BY TITLE
ORDER BY RATINGS ASC

--7
SELECT DISTINCT PUBLISHER, SUM(AVERAGE_RATING) AS AVG_RATING, COUNT(TITLE) AS TOTAL_TITLE FROM books$ WHERE TITLE IS NOT NULL
GROUP BY PUBLISHER
ORDER BY COUNT(TITLE) DESC, SUM(AVERAGE_RATING)

--OKAY HERE WE ARE WITH THE ANALYSIS COMPLETED. TO MOVE ON, WE SHALL DROP SOME COLUMNS PER, LET'S SAY MANAGER'S ORDERS RIGHT?OKAY

ALTER TABLE books$
DROP COLUMN ISBN, ISBN13

select * from books$
--OKAY SO WE DONE, LET'S CREATE A VIEW.

CREATE VIEW BOOK_MAN AS select * from books$

SELECT * FROM BOOK_MAN

--GOOD. KINDLY FIND A TABLEAU WORK ON THIS ON MY PORTFOLIO WEBSITE. THANK YOU

--KINDLY BARE WITH ME THAT THIS ISNT THE FULL DATASET.


